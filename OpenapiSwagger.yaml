openapi: 3.0.0
info:
  title: iMesero API
  version: "1.0.1"
servers:
  - url: http://localhost:8000/api
    description: Entorno de desarrollo

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Token

  schemas:
    RegisterRequest:
      type: object
      required: [name, email, password, password_confirmation]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        password_confirmation:
          type: string

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string

    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string

    Mesa:
      type: object
      properties:
        id:
          type: integer
        codigo:
          type: string
        ocupada:
          type: boolean
        capacidad:
          type: integer

    NewMesa:
      type: object
      required: [codigo, capacidad]
      properties:
        codigo:
          type: string
        ocupada:
          type: boolean
        capacidad:
          type: integer

    Categoria:
      type: object
      properties:
        id:
          type: integer
        nombre:
          type: string

    NewCategoria:
      type: object
      required: [nombre]
      properties:
        nombre:
          type: string

    Producto:
      type: object
      properties:
        id:
          type: integer
        categoria_id:
          type: integer
        imagen:
          type: string
          format: uri
        nombre:
          type: string
        descripcion:
          type: string
        precio:
          type: number
          format: float
        disponible:
          type: boolean

    NewProducto:
      type: object
      required: [categoria_id, nombre, precio]
      properties:
        categoria_id:
          type: integer
        imagen:
          type: string
          format: uri
        nombre:
          type: string
        descripcion:
          type: string
        precio:
          type: number
          format: float
        disponible:
          type: boolean

    Comanda:
      type: object
      properties:
        id:
          type: integer
        mesa_id:
          type: integer
        user_id:
          type: integer
          nullable: true
        anonimo:
          type: boolean
        estado:
          type: string

    NewComanda:
      type: object
      required: [mesa_id]
      properties:
        mesa_id:
          type: integer
        user_id:
          type: integer
        anonimo:
          type: boolean
        estado:
          type: string

    ComandaItem:
      type: object
      properties:
        id:
          type: integer
        comanda_id:
          type: integer
        producto_id:
          type: integer
        cantidad:
          type: integer
        precio_unitario:
          type: number
          format: float
        estado_item_id:
          type: integer

    NewComandaItem:
      type: object
      required: [producto_id, cantidad, precio_unitario, estado_item_id]
      properties:
        producto_id:
          type: integer
        cantidad:
          type: integer
        precio_unitario:
          type: number
          format: float
        estado_item_id:
          type: integer

    EstadoPedidoItem:
      type: object
      properties:
        id:
          type: integer
        nombre:
          type: string
        orden:
          type: integer

    NewEstadoPedidoItem:
      type: object
      required: [nombre, orden]
      properties:
        nombre:
          type: string
        orden:
          type: integer

paths:
  /register:
    post:
      summary: Registrar nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Usuario registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Errores de validación

  /login:
    post:
      summary: Iniciar sesión
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Autenticación exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '422':
          description: Errores de validación

  /logout:
    post:
      summary: Cerrar sesión
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sesión cerrada

  /user:
    get:
      summary: Obtener usuario autenticado
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Datos de usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /mesas:
    get:
      summary: Listar mesas
      responses:
        '200':
          description: Lista de mesas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Mesa'
    post:
      summary: Crear nueva mesa
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMesa'
      responses:
        '201':
          description: Mesa creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mesa'
        '403':
          description: Acceso denegado
        '422':
          description: Errores de validación

  /mesas/{id}:
    get:
      summary: Obtener mesa por ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Detalle de mesa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mesa'
    put:
      summary: Actualizar mesa
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMesa'
      responses:
        '200':
          description: Mesa actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mesa'
        '403':
          description: Acceso denegado
        '422':
          description: Errores de validación
    delete:
      summary: Eliminar mesa
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Mesa eliminada
        '403':
          description: Acceso denegado

  /categorias:
    get:
      summary: Listar categorías
      responses:
        '200':
          description: Lista de categorías
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Categoria'
    post:
      summary: Crear categoría
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCategoria'
      responses:
        '201':
          description: Categoría creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categoria'
        '403':
          description: Acceso denegado
        '422':
          description: Errores de validación

  /categorias/{id}:
    get:
      summary: Obtener categoría por ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Detalle de categoría
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categoria'
    put:
      summary: Actualizar categoría
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCategoria'
      responses:
        '200':
          description: Categoría actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categoria'
        '403':
          description: Acceso denegado
        '422':
          description: Errores de validación
    delete:
      summary: Eliminar categoría
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Categoría eliminada
        '403':
          description: Acceso denegado

  /productos:
    get:
      summary: Listar productos
      responses:
        '200':
          description: Lista de productos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Producto'
    post:
      summary: Crear producto
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProducto'
      responses:
        '201':
          description: Producto creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
        '403':
          description: Acceso denegado
        '422':
          description: Errores de validación

  /productos/{id}:
    get:
      summary: Obtener producto por ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Detalle de producto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
    put:
      summary: Actualizar producto
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProducto'
      responses:
        '200':
          description: Producto actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
        '403':
          description: Acceso denegado
        '422':
          description: Errores de validación
    delete:
      summary: Eliminar producto
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Producto eliminado
        '403':
          description: Acceso denegado

  /comandas:
    get:
      summary: Listar comandas
      responses:
        '200':
          description: Lista de comandas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comanda'
    post:
      summary: Crear comanda
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComanda'
      responses:
        '201':
          description: Comanda creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comanda'
        '403':
          description: Acceso denegado
        '422':
          description: Errores de validación

  /comandas/{id}:
    get:
      summary: Obtener comanda por ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Detalle de comanda
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comanda'
    put:
      summary: Actualizar comanda
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComanda'
      responses:
        '200':
          description: Comanda actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comanda'
        '403':
          description: Acceso denegado
        '422':
          description: Errores de validación
    delete:
      summary: Eliminar comanda
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Comanda eliminada
        '403':
          description: Acceso denegado

  /comandas/{comanda_id}/items:
    get:
      summary: Listar items de una comanda
      parameters:
        - in: path
          name: comanda_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Lista de items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComandaItem'
    post:
      summary: Añadir ítem a comanda
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: comanda_id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComandaItem'
      responses:
        '201':
          description: Ítem creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComandaItem'
        '403':
          description: Acceso denegado
        '422':
          description: Errores de validación

  /comanda-items/{id}:
    get:
      summary: Obtener ítem por ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Detalle de ítem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComandaItem'
    put:
      summary: Actualizar ítem de comanda
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComandaItem'
      responses:
        '200':
          description: Ítem actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComandaItem'
        '403':
          description: Acceso denegado
        '422':
          description: Errores de validación
    delete:
      summary: Eliminar ítem de comanda
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Ítem eliminado
        '403':
          description: Acceso denegado

  /estados-items:
    get:
      summary: Listar estados de ítems
      responses:
        '200':
          description: Lista de estados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EstadoPedidoItem'
    post:
      summary: Crear estado de ítem
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEstadoPedidoItem'
      responses:
        '201':
          description: Estado creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstadoPedidoItem'
        '403':
          description: Acceso denegado
        '422':
          description: Errores de validación

  /estados-items/{id}:
    get:
      summary: Obtener estado por ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Detalle de estado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstadoPedidoItem'
    put:
      summary: Actualizar estado de ítem
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEstadoPedidoItem'
      responses:
        '200':
          description: Estado actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstadoPedidoItem'
        '403':
          description: Acceso denegado
        '422':
          description: Errores de validación
    delete:
      summary: Eliminar estado de ítem
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Estado eliminado
        '403':
          description: Acceso denegado